/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BulkIds {
  /// The list of Transaction ids that were created.
  #[serde(rename = "transaction_ids")]
  transaction_ids: Vec<String>,
  /// If any Transactions were not created because they had an import_id matching a transaction already on the same account, the specified import_id(s) will be included in this list.
  #[serde(rename = "duplicate_import_ids")]
  duplicate_import_ids: Vec<String>
}

impl BulkIds {
  pub fn new(transaction_ids: Vec<String>, duplicate_import_ids: Vec<String>) -> BulkIds {
    BulkIds {
      transaction_ids: transaction_ids,
      duplicate_import_ids: duplicate_import_ids
    }
  }

  pub fn set_transaction_ids(&mut self, transaction_ids: Vec<String>) {
    self.transaction_ids = transaction_ids;
  }

  pub fn with_transaction_ids(mut self, transaction_ids: Vec<String>) -> BulkIds {
    self.transaction_ids = transaction_ids;
    self
  }

  pub fn transaction_ids(&self) -> &Vec<String> {
    &self.transaction_ids
  }


  pub fn set_duplicate_import_ids(&mut self, duplicate_import_ids: Vec<String>) {
    self.duplicate_import_ids = duplicate_import_ids;
  }

  pub fn with_duplicate_import_ids(mut self, duplicate_import_ids: Vec<String>) -> BulkIds {
    self.duplicate_import_ids = duplicate_import_ids;
    self
  }

  pub fn duplicate_import_ids(&self) -> &Vec<String> {
    &self.duplicate_import_ids
  }


}



