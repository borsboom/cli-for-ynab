/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;


//@@@ derive Clone on all models
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Category {
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "category_group_id")]
  category_group_id: String,
  #[serde(rename = "name")]
  name: String,
  /// Whether or not the category is hidden
  #[serde(rename = "hidden")]
  hidden: bool,
  /// If category is hidden this is the id of the category group it originally belonged to before it was hidden.
  #[serde(rename = "original_category_group_id")]
  original_category_group_id: Option<String>,
  #[serde(rename = "note")]
  note: Option<String>,
  /// Budgeted amount in milliunits format
  #[serde(rename = "budgeted")]
  budgeted: ::models::Milliunits,
  /// Activity amount in milliunits format
  #[serde(rename = "activity")]
  activity: ::models::Milliunits,
  /// Balance in milliunits format
  #[serde(rename = "balance")]
  balance: ::models::Milliunits,
  /// The type of goal, if the cagegory has a goal (TB=Target Category Balance, TBD=Target Category Balance by Date, MF=Monthly Funding)
  #[serde(rename = "goal_type")]
  goal_type: Option<String>,
  /// The month a goal was created
  #[serde(rename = "goal_creation_month")]
  goal_creation_month: Option<chrono::NaiveDate>,
  /// The goal target amount in milliunits
  #[serde(rename = "goal_target")]
  goal_target: ::models::Milliunits,
  /// If the goal type is 'TBD' (Target Category Balance by Date), this is the target month for the goal to be completed
  #[serde(rename = "goal_target_month")]
  goal_target_month: Option<chrono::NaiveDate>,
  /// The percentage completion of the goal
  #[serde(rename = "goal_percentage_complete")]
  goal_percentage_complete: i32,
  /// Whether or not the category has been deleted.  Deleted categories will only be included in delta requests.
  #[serde(rename = "deleted")]
  deleted: bool
}

impl Category {
  pub fn new(id: String, category_group_id: String, name: String, hidden: bool, budgeted: ::models::Milliunits, activity: ::models::Milliunits, balance: ::models::Milliunits, goal_target: ::models::Milliunits, goal_percentage_complete: i32, deleted: bool) -> Category {
    Category {
      id: id,
      category_group_id: category_group_id,
      name: name,
      hidden: hidden,
      original_category_group_id: None,
      note: None,
      budgeted: budgeted,
      activity: activity,
      balance: balance,
      goal_type: None,
      goal_creation_month: None,
      goal_target: goal_target,
      goal_target_month: None,
      goal_percentage_complete: goal_percentage_complete,
      deleted: deleted
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> Category {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_category_group_id(&mut self, category_group_id: String) {
    self.category_group_id = category_group_id;
  }

  pub fn with_category_group_id(mut self, category_group_id: String) -> Category {
    self.category_group_id = category_group_id;
    self
  }

  pub fn category_group_id(&self) -> &String {
    &self.category_group_id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Category {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_hidden(&mut self, hidden: bool) {
    self.hidden = hidden;
  }

  pub fn with_hidden(mut self, hidden: bool) -> Category {
    self.hidden = hidden;
    self
  }

  pub fn hidden(&self) -> &bool {
    &self.hidden
  }


  pub fn set_original_category_group_id(&mut self, original_category_group_id: String) {
    self.original_category_group_id = Some(original_category_group_id);
  }

  pub fn with_original_category_group_id(mut self, original_category_group_id: String) -> Category {
    self.original_category_group_id = Some(original_category_group_id);
    self
  }

  pub fn original_category_group_id(&self) -> Option<&String> {
    self.original_category_group_id.as_ref()
  }

  // @@@ EVERYWHERE I CHANGED A TYPE TO OPTION<STRING>, I SHOULD ALSO CHANGE STYLE TO USE 'RESET_' METHOD LIKE THIS
  pub fn reset_original_category_group_id(&mut self) {
    self.original_category_group_id = None;
  }

  pub fn set_note(&mut self, note: Option<String>) {
    self.note = note;
  }

  pub fn with_note(mut self, note: Option<String>) -> Category {
    self.note = note;
    self
  }

  pub fn note(&self) -> Option<&String> {
    self.note.as_ref()
  }


  pub fn set_budgeted(&mut self, budgeted: ::models::Milliunits) {
    self.budgeted = budgeted;
  }

  pub fn with_budgeted(mut self, budgeted: ::models::Milliunits) -> Category {
    self.budgeted = budgeted;
    self
  }

  pub fn budgeted(&self) -> &::models::Milliunits {
    &self.budgeted
  }


  pub fn set_activity(&mut self, activity: ::models::Milliunits) {
    self.activity = activity;
  }

  pub fn with_activity(mut self, activity: ::models::Milliunits) -> Category {
    self.activity = activity;
    self
  }

  pub fn activity(&self) -> &::models::Milliunits {
    &self.activity
  }


  pub fn set_balance(&mut self, balance: ::models::Milliunits) {
    self.balance = balance;
  }

  pub fn with_balance(mut self, balance: ::models::Milliunits) -> Category {
    self.balance = balance;
    self
  }

  pub fn balance(&self) -> &::models::Milliunits {
    &self.balance
  }


  pub fn set_goal_type(&mut self, goal_type: Option<String>) {
    self.goal_type = goal_type;
  }

  pub fn with_goal_type(mut self, goal_type: Option<String>) -> Category {
    self.goal_type = goal_type;
    self
  }

  pub fn goal_type(&self) -> Option<&String> {
    self.goal_type.as_ref()
  }


  pub fn set_goal_creation_month(&mut self, goal_creation_month: Option<chrono::NaiveDate>) {
    self.goal_creation_month = goal_creation_month;
  }

  pub fn with_goal_creation_month(mut self, goal_creation_month: Option<chrono::NaiveDate>) -> Category {
    self.goal_creation_month = goal_creation_month;
    self
  }

  pub fn goal_creation_month(&self) -> Option<&chrono::NaiveDate> {
    self.goal_creation_month.as_ref()
  }


  pub fn set_goal_target(&mut self, goal_target: ::models::Milliunits) {
    self.goal_target = goal_target;
  }

  pub fn with_goal_target(mut self, goal_target: ::models::Milliunits) -> Category {
    self.goal_target = goal_target;
    self
  }

  pub fn goal_target(&self) -> &::models::Milliunits {
    &self.goal_target
  }


  pub fn set_goal_target_month(&mut self, goal_target_month: Option<chrono::NaiveDate>) {
    self.goal_target_month = goal_target_month;
  }

  pub fn with_goal_target_month(mut self, goal_target_month: Option<chrono::NaiveDate>) -> Category {
    self.goal_target_month = goal_target_month;
    self
  }

  pub fn goal_target_month(&self) -> Option<&chrono::NaiveDate> {
    self.goal_target_month.as_ref()
  }


  pub fn set_goal_percentage_complete(&mut self, goal_percentage_complete: i32) {
    self.goal_percentage_complete = goal_percentage_complete;
  }

  pub fn with_goal_percentage_complete(mut self, goal_percentage_complete: i32) -> Category {
    self.goal_percentage_complete = goal_percentage_complete;
    self
  }

  pub fn goal_percentage_complete(&self) -> &i32 {
    &self.goal_percentage_complete
  }


  pub fn set_deleted(&mut self, deleted: bool) {
    self.deleted = deleted;
  }

  pub fn with_deleted(mut self, deleted: bool) -> Category {
    self.deleted = deleted;
    self
  }

  pub fn deleted(&self) -> &bool {
    &self.deleted
  }


}



