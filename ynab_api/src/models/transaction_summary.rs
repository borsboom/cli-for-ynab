/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TransactionSummary {
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "date")]
  date: chrono::NaiveDate,
  /// The transaction amount in milliunits format
  #[serde(rename = "amount")]
  amount: ::models::Milliunits,
  #[serde(rename = "memo")]
  memo: Option<String>,
  /// The cleared status of the transaction
  #[serde(rename = "cleared")]
  cleared: ::models::Cleared,
  /// Whether or not the transaction is approved
  #[serde(rename = "approved")]
  approved: bool,
  /// The transaction flag
  #[serde(rename = "flag_color")]
  flag_color: Option<::models::FlagColor>,
  #[serde(rename = "account_id")]
  account_id: String,
  #[serde(rename = "payee_id")]
  payee_id: Option<String>,
  #[serde(rename = "category_id")]
  category_id: Option<String>,
  /// If a transfer transaction, the account to which it transfers
  #[serde(rename = "transfer_account_id")]
  transfer_account_id: Option<String>,
  /// If a transfer transaction, the id of transaction on the other side of the transfer
  #[serde(rename = "transfer_transaction_id")]
  transfer_transaction_id: Option<String>,
  /// If the Transaction was imported, this field is a unique (by account) import identifier.  If this transaction was imported through File Based Import or Direct Import and not through the API, the import_id will have the format: 'YNAB:[milliunit_amount]:[iso_date]:[occurrence]'.  For example, a transaction dated 2015-12-30 in the amount of -$294.23 USD would have an import_id of 'YNAB:-294230:2015-12-30:1'.  If a second transaction on the same account was imported and had the same date and same amount, its import_id would be 'YNAB:-294230:2015-12-30:2'.
  #[serde(rename = "import_id")]
  import_id: Option<String>,
  /// Whether or not the transaction has been deleted.  Deleted transactions will only be included in delta requests.
  #[serde(rename = "deleted")]
  deleted: bool
}

impl TransactionSummary {
  pub fn new(id: String, date: chrono::NaiveDate, amount: ::models::Milliunits, cleared: ::models::Cleared, approved: bool, account_id: String, deleted: bool) -> TransactionSummary {
    TransactionSummary {
      id: id,
      date: date,
      amount: amount,
      memo: None,
      cleared: cleared,
      approved: approved,
      flag_color: None,
      account_id: account_id,
      payee_id: None,
      category_id: None,
      transfer_account_id: None,
      transfer_transaction_id: None,
      import_id: None,
      deleted: deleted
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> TransactionSummary {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_date(&mut self, date: chrono::NaiveDate) {
    self.date = date;
  }

  pub fn with_date(mut self, date: chrono::NaiveDate) -> TransactionSummary {
    self.date = date;
    self
  }

  pub fn date(&self) -> &chrono::NaiveDate {
    &self.date
  }


  pub fn set_amount(&mut self, amount: ::models::Milliunits) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: ::models::Milliunits) -> TransactionSummary {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &::models::Milliunits {
    &self.amount
  }


  pub fn set_memo(&mut self, memo: Option<String>) {
    self.memo = memo;
  }

  pub fn with_memo(mut self, memo: Option<String>) -> TransactionSummary {
    self.memo = memo;
    self
  }

  pub fn memo(&self) -> &Option<String> {
    &self.memo
  }


  pub fn set_cleared(&mut self, cleared: ::models::Cleared) {
    self.cleared = cleared;
  }

  pub fn with_cleared(mut self, cleared: ::models::Cleared) -> TransactionSummary {
    self.cleared = cleared;
    self
  }

  pub fn cleared(&self) -> &::models::Cleared {
    &self.cleared
  }


  pub fn set_approved(&mut self, approved: bool) {
    self.approved = approved;
  }

  pub fn with_approved(mut self, approved: bool) -> TransactionSummary {
    self.approved = approved;
    self
  }

  pub fn approved(&self) -> &bool {
    &self.approved
  }


  pub fn set_flag_color(&mut self, flag_color: Option<::models::FlagColor>) {
    self.flag_color = flag_color;
  }

  pub fn with_flag_color(mut self, flag_color: Option<::models::FlagColor>) -> TransactionSummary {
    self.flag_color = flag_color;
    self
  }

  pub fn flag_color(&self) -> &Option<::models::FlagColor> {
    &self.flag_color
  }


  pub fn set_account_id(&mut self, account_id: String) {
    self.account_id = account_id;
  }

  pub fn with_account_id(mut self, account_id: String) -> TransactionSummary {
    self.account_id = account_id;
    self
  }

  pub fn account_id(&self) -> &String {
    &self.account_id
  }


  pub fn set_payee_id(&mut self, payee_id: Option<String>) {
    self.payee_id = payee_id;
  }

  pub fn with_payee_id(mut self, payee_id: Option<String>) -> TransactionSummary {
    self.payee_id = payee_id;
    self
  }

  pub fn payee_id(&self) -> &Option<String> {
    &self.payee_id
  }


  pub fn set_category_id(&mut self, category_id: Option<String>) {
    self.category_id = category_id;
  }

  pub fn with_category_id(mut self, category_id: Option<String>) -> TransactionSummary {
    self.category_id = category_id;
    self
  }

  pub fn category_id(&self) -> &Option<String> {
    &self.category_id
  }


  pub fn set_transfer_account_id(&mut self, transfer_account_id: Option<String>) {
    self.transfer_account_id = transfer_account_id;
  }

  pub fn with_transfer_account_id(mut self, transfer_account_id: Option<String>) -> TransactionSummary {
    self.transfer_account_id = transfer_account_id;
    self
  }

  pub fn transfer_account_id(&self) -> &Option<String> {
    &self.transfer_account_id
  }


  pub fn set_transfer_transaction_id(&mut self, transfer_transaction_id: Option<String>) {
    self.transfer_transaction_id = transfer_transaction_id;
  }

  pub fn with_transfer_transaction_id(mut self, transfer_transaction_id: Option<String>) -> TransactionSummary {
    self.transfer_transaction_id = transfer_transaction_id;
    self
  }

  pub fn transfer_transaction_id(&self) -> &Option<String> {
    &self.transfer_transaction_id
  }


  pub fn set_import_id(&mut self, import_id: Option<String>) {
    self.import_id = import_id;
  }

  pub fn with_import_id(mut self, import_id: Option<String>) -> TransactionSummary {
    self.import_id = import_id;
    self
  }

  pub fn import_id(&self) -> &Option<String> {
    &self.import_id
  }


  pub fn set_deleted(&mut self, deleted: bool) {
    self.deleted = deleted;
  }

  pub fn with_deleted(mut self, deleted: bool) -> TransactionSummary {
    self.deleted = deleted;
    self
  }

  pub fn deleted(&self) -> &bool {
    &self.deleted
  }


}



