/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Account {
  #[serde(rename = "id")]
  id: String,
  #[serde(rename = "name")]
  name: String,
  /// The type of account. Note: payPal, merchantAccount, investmentAccount, and mortgage types have been deprecated and will be removed in the future.
  #[serde(rename = "type")]
  _type: String,
  /// Whether this account is on budget or not
  #[serde(rename = "on_budget")]
  on_budget: bool,
  /// Whether this account is closed or not
  #[serde(rename = "closed")]
  closed: bool,
  #[serde(rename = "note")]
  // @@@ LOOK FOR ALL OTHER PLACES WHERE THINGS SHOULD BE OPTIONAL
  note: Option<String>,
  /// The current balance of the account in milliunits format
  #[serde(rename = "balance")]
  balance: ::models::Milliunits,
  /// The current cleared balance of the account in milliunits format
  #[serde(rename = "cleared_balance")]
  cleared_balance: ::models::Milliunits,
  /// The current uncleared balance of the account in milliunits format
  #[serde(rename = "uncleared_balance")]
  uncleared_balance: ::models::Milliunits,
  /// The payee id which should be used when transferring to this account
  #[serde(rename = "transfer_payee_id")]
  transfer_payee_id: String,
  /// Whether or not the account has been deleted.  Deleted accounts will only be included in delta requests.
  #[serde(rename = "deleted")]
  deleted: bool
}

impl Account {
  pub fn new(id: String, name: String, _type: String, on_budget: bool, closed: bool, balance: ::models::Milliunits, cleared_balance: ::models::Milliunits, uncleared_balance: ::models::Milliunits, transfer_payee_id: String, deleted: bool) -> Account {
    Account {
      id: id,
      name: name,
      _type: _type,
      on_budget: on_budget,
      closed: closed,
      note: None,
      balance: balance,
      cleared_balance: cleared_balance,
      uncleared_balance: uncleared_balance,
      transfer_payee_id: transfer_payee_id,
      deleted: deleted
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> Account {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Account {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with_type(mut self, _type: String) -> Account {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_on_budget(&mut self, on_budget: bool) {
    self.on_budget = on_budget;
  }

  pub fn with_on_budget(mut self, on_budget: bool) -> Account {
    self.on_budget = on_budget;
    self
  }

  pub fn on_budget(&self) -> &bool {
    &self.on_budget
  }


  pub fn set_closed(&mut self, closed: bool) {
    self.closed = closed;
  }

  pub fn with_closed(mut self, closed: bool) -> Account {
    self.closed = closed;
    self
  }

  pub fn closed(&self) -> &bool {
    &self.closed
  }


  pub fn set_note(&mut self, note: Option<String>) {
    self.note = note;
  }

  pub fn with_note(mut self, note: Option<String>) -> Account {
    self.note = note;
    self
  }

  pub fn note(&self) -> Option<&String> {
    self.note.as_ref()
  }


  pub fn set_balance(&mut self, balance: ::models::Milliunits) {
    self.balance = balance;
  }

  pub fn with_balance(mut self, balance: ::models::Milliunits) -> Account {
    self.balance = balance;
    self
  }

  pub fn balance(&self) -> &::models::Milliunits {
    &self.balance
  }


  pub fn set_cleared_balance(&mut self, cleared_balance: ::models::Milliunits) {
    self.cleared_balance = cleared_balance;
  }

  pub fn with_cleared_balance(mut self, cleared_balance: ::models::Milliunits) -> Account {
    self.cleared_balance = cleared_balance;
    self
  }

  pub fn cleared_balance(&self) -> &::models::Milliunits {
    &self.cleared_balance
  }


  pub fn set_uncleared_balance(&mut self, uncleared_balance: ::models::Milliunits) {
    self.uncleared_balance = uncleared_balance;
  }

  pub fn with_uncleared_balance(mut self, uncleared_balance: ::models::Milliunits) -> Account {
    self.uncleared_balance = uncleared_balance;
    self
  }

  pub fn uncleared_balance(&self) -> &::models::Milliunits {
    &self.uncleared_balance
  }


  pub fn set_transfer_payee_id(&mut self, transfer_payee_id: String) {
    self.transfer_payee_id = transfer_payee_id;
  }

  pub fn with_transfer_payee_id(mut self, transfer_payee_id: String) -> Account {
    self.transfer_payee_id = transfer_payee_id;
    self
  }

  pub fn transfer_payee_id(&self) -> &String {
    &self.transfer_payee_id
  }


  pub fn set_deleted(&mut self, deleted: bool) {
    self.deleted = deleted;
  }

  pub fn with_deleted(mut self, deleted: bool) -> Account {
    self.deleted = deleted;
    self
  }

  pub fn deleted(&self) -> &bool {
    &self.deleted
  }


}



