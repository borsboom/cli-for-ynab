/* 
 * YNAB API Endpoints
 *
 * Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SaveTransactionsResponseData {
  /// The transaction ids that were saved
  #[serde(rename = "transaction_ids")]
  transaction_ids: Vec<String>,
  /// If a single transaction was specified, the transaction that was saved
  #[serde(rename = "transaction")]
  transaction: Option<::models::TransactionDetail>,
  /// If multiple transactions were specified, the transactions that were saved
  #[serde(rename = "transactions")]
  transactions: Option<Vec<::models::TransactionDetail>>,
  /// If multiple transactions were specified, a list of import_ids that were not were created because of an existing import_id found on the same account
  #[serde(rename = "duplicate_import_ids")]
  duplicate_import_ids: Option<Vec<String>>
}

impl SaveTransactionsResponseData {
  pub fn new(transaction_ids: Vec<String>) -> SaveTransactionsResponseData {
    SaveTransactionsResponseData {
      transaction_ids: transaction_ids,
      transaction: None,
      transactions: None,
      duplicate_import_ids: None
    }
  }

  pub fn set_transaction_ids(&mut self, transaction_ids: Vec<String>) {
    self.transaction_ids = transaction_ids;
  }

  pub fn with_transaction_ids(mut self, transaction_ids: Vec<String>) -> SaveTransactionsResponseData {
    self.transaction_ids = transaction_ids;
    self
  }

  pub fn transaction_ids(&self) -> &Vec<String> {
    &self.transaction_ids
  }


  pub fn set_transaction(&mut self, transaction: ::models::TransactionDetail) {
    self.transaction = Some(transaction);
  }

  pub fn with_transaction(mut self, transaction: ::models::TransactionDetail) -> SaveTransactionsResponseData {
    self.transaction = Some(transaction);
    self
  }

  pub fn transaction(&self) -> Option<&::models::TransactionDetail> {
    self.transaction.as_ref()
  }

  pub fn reset_transaction(&mut self) {
    self.transaction = None;
  }

  pub fn set_transactions(&mut self, transactions: Vec<::models::TransactionDetail>) {
    self.transactions = Some(transactions);
  }

  pub fn with_transactions(mut self, transactions: Vec<::models::TransactionDetail>) -> SaveTransactionsResponseData {
    self.transactions = Some(transactions);
    self
  }

  pub fn transactions(&self) -> Option<&Vec<::models::TransactionDetail>> {
    self.transactions.as_ref()
  }

  pub fn reset_transactions(&mut self) {
    self.transactions = None;
  }

  pub fn set_duplicate_import_ids(&mut self, duplicate_import_ids: Vec<String>) {
    self.duplicate_import_ids = Some(duplicate_import_ids);
  }

  pub fn with_duplicate_import_ids(mut self, duplicate_import_ids: Vec<String>) -> SaveTransactionsResponseData {
    self.duplicate_import_ids = Some(duplicate_import_ids);
    self
  }

  pub fn duplicate_import_ids(&self) -> Option<&Vec<String>> {
    self.duplicate_import_ids.as_ref()
  }

  pub fn reset_duplicate_import_ids(&mut self) {
    self.duplicate_import_ids = None;
  }

}



